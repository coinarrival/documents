openapi: 3.0.2
info:
  title: CoinArrival-Backend
  description: Backend API conrtains of CoinArrival.
  version: 0.2.0
servers:
  - url: 'http://localhost:8000'
    description: default backend host
paths:
  /verification:
    post:
      summary: Verify the username and password
      description: Check if there's a valid account match the given username and password
      requestBody:
        description: A JSON object containing username and password of the account to be verified
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  required: true
                password:
                  type: string
                  required: true
      responses:
        '200':
          description: "Network OK. A JSON object containing status \U0001F434 will be returned to requester."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: 'An integer code indicating the response status. 200 for verification passed, 400 for necessary field not filled, 406 for incorrect username or password.'
          examples:
            VerificationPassed:
              status_code: 200
            InvalidRequest:
              status_code: 400
            IncorrectAccount:
              status_code: 406
        '500':
          description: Backend error.
  /account_info:
    get:
      summary: Query user info
      description: Query user info with given fields.
      parameters:
        - in: query
          name: username
          schema:
            type: string
          required: true
          description: username of queryed account
      responses:
        '200':
          description: "Network OK. A JSON object containing status \U0001F434 will be returned to requester."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: 'An integer code indicating the response status. 200 for query successfully, 404 for no such user.'
                  data:
                    type: object
                    description: Queryed user info. Only available when status_code is 200.
                    properties:
                      userid:
                        type: string
                      username:
                        type: string
                      gender:
                        type: string
                      email:
                        type: string
                      phone:
                        type: string
                      school:
                        type: string
                      major:
                        type: string
                      age:
                        type: integer
                      role:
                        type: string
                        enum: ['teacher', 'student']
                      studentID:
                        type: string
                        description: Only available when role is student
                      grade:
                        type: string
                        description: Only available when role is student
                      teacherID:
                        type: string
                        description: Only available when role is teacher
                      avatar:
                        type: string
          examples:
            SuccessfulltQueryed_Teacher:
              status_code: 200
              data:
                userid: '123'
                username: example
                gender: 'male'
                email: example@example.com
                phone: 12345678901
                school: 'SYSU'
                major: 'SE'
                age: 18
                role: 'student'
                studentID: '16340299'
                grade: '2016'
                avatar: EXAMPLE.PNG
            SuccessfulltQueryed_Student:
              status_code: 200
              data:
                userid: '123'
                username: example
                gender: 'male'
                email: example@example.com
                phone: 12345678901
                school: 'SYSU'
                major: 'SE'
                age: 34
                role: 'teacher'
                teacherID: '151273'
                avatar: EXAMPLE.PNG
            NoSuchUser:
              status_code: 404
        '500':
          description: Backend error.
    post:
      summary: Update account info
      description: Update account info
      requestBody:
        description: A JSON object containing all user info needed to update
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  required: true
                password:
                  type: string
                gender:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                school:
                  type: string
                major:
                  type: string
                age:
                  type: integer
                studentID:
                  type: string
                  description: Only available when role is student
                grade:
                  type: string
                  description: Only available when role is student
                teacherID:
                  type: string
                  description: Only available when role is treacher
                avatar:
                  type: string
      responses:
        '200':
          description: "Network OK. A JSON object containing status \U0001F434 will be returned to requester."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: 'An integer code indicating the response status. 201 for Successfully updated, 404 for no such username, 400 for necessary field not filled or invalid format, 409 for confict field.'
                  data:
                    type: object
                    properties:
                      which:
                        type: string
                        description: 'Describing which field is conflict, only available when status_code is 409.'
          examples:
            SuccessfullyUpdated:
              status_code: 201
            NoSuchUsername:
              status_code: 404
            InvalidFormat:
              status_code: 400
            ConflictField:
              status_code: 409
              data:
                which: email
        '500':
          description: Backend error.
  /registration:
    post:
      summary: Create an account
      description: Create an account with given info
      requestBody:
        description: A JSON object containing all needed info to create an account.
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  required: true
                password:
                  type: string
                  required: true
                email:
                  type: string
                  required: true
                phone:
                  type: string
                  required: true
      responses:
        '200':
          description: "Network OK. A JSON object containing status \U0001F434 will be returned to requester."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: 'An integer code indicating the response status. 201 for Successfully created, 400 for necessary field not filled or invalid format, 409 for conflict field.'
                  data:
                    type: object
                    properties:
                      which:
                        type: string
                        description: 'Describing which field is conflict, only available when status_code is 409.'
          examples:
            SuccessfullyCreated:
              status_code: 201
            InvalidFormat:
              status_code: 400
            ConflictField:
              status_code: 409
              data:
                which: email
        '500':
          description: Backend error.
  /balance:
    get:
      summary: Query wallet balance of given user 
      description: Query the wallet balance of given user.
      parameter:
        - in: query
          name: username
          schema:
            type: string
          required: true
          description: username of queryed account
      responses:
        '200':
          description: "Network OK. A JSON object containing status \U0001F434 will be returned to requester."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: 'An integer code indicating the response status. 200 for query successfully, 404 for no such user, 400 for necessary field not filled or invalid format.'
                  data:
                    type: object
                    properties:
                      balance:
                        type: number
                        description: "Balance of queryed account's wallet. Only available when status_code is 200."
          examples:
            SuccessfullyQueryed:
              status_code: 200
              data:
                balance: 114192.2
            NoSuchUser:
              status_code: 404
            NotFilledField:
              status_code: 400
  /task: # GET for query one task, POST for create one task
    get:
      summary: Query one task
      description: Use taskID to query a task
      parameters: 
        - in: query
          name: taskID
          schema:
            type: string
          required: true
      responses:
        '200': 
          description: "Network OK. A JSON object containing status \U0001F434 will be returned to requester."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: 'An integer code indicating the response status. 200 for Successfully queryed, 404 for no such task, 400 for necessary field not filled or invalid format.'
                  data:
                    type: object
                    properties:
                      content:
                        type: string
                      type:
                        type: string
                      issuer:
                        type: string
                      reward:
                        type: number
                      deadline:
                        type: string
                      repeatTime:
                        type: integer
                      isCompleted:
                        type: boolean
          examples:
            SuccessfullyQueryed:
              status_code: 200
              data:
                content: EXAMPLE
                type: EXAMPLE
                issuer: EXAMPLE
                reward: 999.999
                deadline: YYYY-MM-DD
                repeatTime: 15
                isCompleted: false
            NoSuchTask:
              status_code: 404
            FieldNotFilled:
              status_code: 400
        '500':
          description: Backend error
    post:
      summary: Create a task
      description: Create a task with given info, if success, a taskID will be returned. Backend should check the balance to make sure issuer has enough money to make this request.
      requestBody:
        description: A JSON object containing all needed info to create a task.
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                type:
                  type: string
                issuer:
                  type: string
                reward:
                  type: number
                repeatTime:
                  type: integer
                deadline:
                  type: string
      responses:
        '200':
          description: "Network OK. A JSON object containing status \U0001F434 will be returned to requester."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: 'An integer code indicating the response status. 201 for Successfully created, 400 for necessary field not filled or invalid format, 403 for insufficient balance.'
                  data:
                    type: object
                    properties:
                      taskID:
                        type: string
                        description: 'TaskID of created task, only available when status_code is 201.'
          examples:
            SuccessfullyCreated:
              status_code: 201
              data:
                taskID: '123'
            FieldNotFilled:
              status_code: 400
            InsufficientBalance:
              status_code: 403
        '500':
          description: Backend error.
  /tasks: # GET for query one page of task
    get:
      summary: Get a page of avaiable tasks
      description: Get a page of available tasks. Page number could be given in the parameter. Only uncompleted tasks will be returned.
      parameters:
        - in: query
          name: page
          description: 'Which page of data do you require?'
          schema:
            type: integer
      responses:
        '200': 
          description: "Network OK. A JSON object containing status \U0001F434 will be returned to requester."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: 'An integer code indicating the response status. 200 for Successfully queryed, 400 for necessary field not filled or invalid format, 416 for parameter out of range.'
                  data:
                    type: object
                    properties:
                      tasks:
                        type: array
                        description: 'Array of tasks in this page, only available when status_code is 200.'
                        items:
                          type: object
                          properties:
                            taskID:
                              type: string
                            content:
                              type: string
                            type:
                              type: string
                            issuer:
                              type: string
                            reward:
                              type: number
                            deadline:
                              type: string
                            repeatTime:
                              type: integer
                      max_pages:
                        type: integer
                        description: 'Maximal valid page number.'
          examples:
            SuccessfullyQueryed:
              status_code: 200
              data:
                tasks:
                  - taskID: '123'
                    content: EXAMPLE
                    type: EXAMPLE
                    issuer: EXAMPLE
                    reward: 123.123
                    deadline: YYYY-MM-DD
                    repeatTime: 15
                  - taskID: '124'
                    content: EXAMPLE
                    type: EXAMPLE
                    issuer: EXAMPLE
                    reward: 123.123
                    deadline: YYYY-MM-DD
                    repeatTime: 15
                max_pages: 15
            FieldNotFilled:
              status_code: 400
              data:
                max_pages: 15
            OutOfRange:
              status_code: 416
              data:
                max_pages: 15
        '500':
          description: Backend error.
  /accepted_tasks: # GET for query accepted tasks
    get:
      summary: Query a page of accpted tasks of given user
      description: Query a page of accpted tasks of given user. One can specify the page number to show a specific range of tasks. It should be indicated that whether the task has been finished by the user in the data field of returned JSON object.
      parameters:
        - in: query
          name: page
          required: true
          schema:
            type: integer
        - in: query
          name: username
          required: true
          schema:
            type: username
      responses:
        '200':
          description: "Network OK. A JSON object containing status \U0001F434 will be returned to requester."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: 'An integer code indicating the response status. 200 for Successfully queryed, 400 for necessary field not filled or invalid format, 404 for no such username, 416 for parameter out of range.'
                    data:
                      type: object
                    properties:
                      tasks:
                        type: array
                        description: 'Array of tasks in this page, only available when status_code is 200.'
                        items:
                          type: object
                          properties:
                            taskID:
                              type: string
                            content:
                              type: string
                            type:
                              type: string
                            issuer:
                              type: string
                            reward:
                              type: number
                            deadline:
                              type: string
                            isFinished:
                              type: boolean
                      max_pages:
                        type: integer
                        description: 'Maximal valid page number.'
          examples:
            SuccessfullyQueryed:
              status_code: 200
              data:
                tasks:
                  - taskID: '123'
                    content: EXAMPLE
                    type: EXAMPLE
                    issuer: EXAMPLE
                    reward: 123.123
                    deadline: YYYY-MM-DD
                    isFinished: false
                  - taskID: '124'
                    content: EXAMPLE
                    type: EXAMPLE
                    issuer: EXAMPLE
                    reward: 123.123
                    deadline: YYYY-MM-DD
                    isFinished: true
                max_pages: 15
            FieldNotFilled:
              status_code: 400
              data:
                max_pages: 15
            UserNotFound:
              status_code: 404
              data:
                max_pages: 15
            OutOfRange:
              status_code: 416
              data:
                max_pages: 15
        '500':
          description: Backend error.
    post:
      summary: Accept a new task.
      description: "Try to accept a new task. One **cannot** accept a same task for mupltiple times."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: A JSON object describing the one who accept the task and the taskID of the task.
              properties:
                username:
                  type: string
                taskID:
                  type: string
      responses:
        '200': 
          description: "Network OK. A JSON object containing status \U0001F434 will be returned to requester."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: 'An integer code indicating the response status. 201 for Successfully accepted, 400 for necessary field not filled or invalid format, 404 for no such username or taskID, 409 for accept a same task for multiple times.'
          examples:
            SuccessfullyAccept:
              status_code: 201
            FieldNotFilled:
              status_code: 400
            NoSuchEntity:
              status_code: 404
            MupltipleAccptance:
              status_code: 409
        '500':
          description: Backend error.
  /created_tasks: # GET for query created tasks
    get:
      summary: Query a page of created tasks of given user
      description: Query a page of created tasks of given user. One can specify the page number to show a specific range of tasks. It should be indicated that whether the task has been completed in the data field of returned JSON object.
      parameters:
        - in: query
          name: page
          required: true
          schema:
            type: integer
        - in: query
          name: username
          required: true
          schema:
            type: username
      responses:
        '200':
          description: "Network OK. A JSON object containing status \U0001F434 will be returned to requester."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: 'An integer code indicating the response status. 200 for Successfully queryed, 400 for necessary field not filled or invalid format, 404 for no such username, 416 for parameter out of range.'
                    data:
                      type: object
                    properties:
                      tasks:
                        type: array
                        description: 'Array of tasks in this page, only available when status_code is 200.'
                        items:
                          type: object
                          properties:
                            taskID:
                              type: string
                            content:
                              type: string
                            type:
                              type: string
                            issuer:
                              type: string
                            reward:
                              type: number
                            deadline:
                              type: string
                            isCompleted:
                              type: boolean
                      max_pages:
                        type: integer
                        description: 'Maximal valid page number.'
          examples:
            SuccessfullyQueryed:
              status_code: 200
              data:
                tasks:
                  - taskID: '123'
                    content: EXAMPLE
                    type: EXAMPLE
                    issuer: EXAMPLE
                    reward: 123.123
                    deadline: YYYY-MM-DD
                    isCompleted: false
                  - taskID: '124'
                    content: EXAMPLE
                    type: EXAMPLE
                    issuer: EXAMPLE
                    reward: 123.123
                    deadline: YYYY-MM-DD
                    isCompleted: true
                max_pages: 15
            FieldNotFilled:
              status_code: 400
              data:
                max_pages: 15
            UserNotFound:
              status_code: 404
              data:
                max_pages: 15
            OutOfRange:
              status_code: 416
              data:
                max_pages: 15
        '500':
          description: Backend error.