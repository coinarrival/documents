openapi: 3.0.2
info:
  title: CoinArrival-Backend
  description: Backend API conrtains of CoinArrival.
  version: 0.1.0
  
servers:
  - url: http://localhost:8000
    description: default backend host

paths:
  /verification:
    post:
      summary: Verify the username and password
      description: Check if there's a valid account match the given username and password
      requestBody:
        description: A JSON object containing username and password of the account to be verified
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  required: true
                password:
                  type: string
                  required: true
      responses:
        '200':
          description: Network OK. A JSON object containing status üê¥ will be returned to requester.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: An integer code indicating the response status. 200 for verification passed, 400 for necessary field not filled, 406 for incorrect username or password.
          examples:
            VerificationPassed:
              status_code: 200
            InvalidRequest:
              status_code: 400
            IncorrectAccount:
              status_code: 406
        '500':
          description: Backend error.
  /account_info:
    get:
      summary: Query user info
      description: Query user info with given fields.
      parameters: 
        - in: query
          name: username
          schema:
            type: string
          required: true
          description: username of queryed account
      responses:
        '200':
          description: Network OK. A JSON object containing status üê¥ will be returned to requester.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: An integer code indicating the response status. 200 for query successfully, 404 for no such user.
                  data:
                    type: object
                    description: Queryed user info. Only available when status_code is 200.
                    properties:
                      username:
                        type: string
                      email:
                        type: string
                      phone:
                        type: string
                      avatar:
                        type: string
          examples:
            QuerySuccessfully:
              status_code: 200
              data:
                username: example
                email: example@example.com
                phone: 12345678901
                avatar: EXAMPLE.PNG
            NoSuchUser:
              status_code: 404
        '500':
          description: Backend error.
    post:
      summary: Update account info
      description: Update account info
      requestBody:
        description: A JSON object containing all user info needed to update
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  required: true
                password:
                  type: string
                email:
                  type: string
                phone:
                  type: string
      responses:
        '200':
          description: Network OK. A JSON object containing status üê¥ will be returned to requester.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code: 
                    type: integer
                    description: An integer code indicating the response status. 201 for Successfully updated, 404 for no such username, 400 for necessary field not filled or invalid format, 409 for confict field.
                  data:
                    type: object
                    properties:
                      which:
                        type: string
                        description: Which field is conflict, only available when status_code is 409.
          examples:
            SuccessfullyUpdated:
              status_code: 201
            NoSuchUsername:
              status_code: 404
            InvalidFormat:
              status_code: 400
            ConflictField:
              status_code: 409
              data:
                which: "email"
        '500':
          description: Backend error.
  /registration:
    post:
      summary: Create an account
      description: Create an account with given info
      requestBody:
        description: A JSON object containing all needed info to create an account.
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  required: true
                password:
                  type: string
                  required: true
      responses:
        '200':
          description: Network OK. A JSON object containing status üê¥ will be returned to requester.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: An integer code indicating the response status. 201 for Successfully created, 400 for necessary field not filled or invalid format, 409 for confict username.
          examples:
            SuccessfullyCreated:
              status_code: 201
            InvalidFormat:
              status_code: 400
            ConflictUsername:
              status_code: 409
        '500':
          description: Backend error.
        