openapi: 3.0.2
info:
  title: CoinArrival-Serverend
  description: Serverend API conrtains of CoinArrival.
  version: 0.2.0
  
servers:
  - url: http://localhost:4000
    description: default serverend host

paths:
  /public/*:
    get:
      summary: Get public assests
      description: Get public assests
      responses:
        200:
          description: Network OK, resouces sent.
        404:
          description: Resource not found.
  /login:
    post:
      summary: Verify the username and password
      description: Check if there's a valid account match the given username and password
      requestBody:
        description: A JSON object containing username and password of the account to be verified
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  required: true
                password:
                  type: string
                  required: true
      responses:
        '200': 
          description: Network OK. A JSON object containing status üê¥ will be returned to requester.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: An integer code indicating the response status. 200 for successfully login, 406 for no such username or unmatched password.
          examples:
            SuccessfullyLogin:
              status_code: 200
            InvalidPassword:
              status_code: 406
        '500':
          description: Serverend or backend error.
  /account_info:
    get:
      summary: Get user info
      description: Get user info by giving the username.
      parameters: 
        - in: query
          name: username
          schema:
            type: string
          required: true
          description: username of queryed user
      responses:
        '200':
          description: Network OK. A JSON object containing status üê¥ will be returned to requester.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: An integer code indicating the response status. 200 for successfully queryed, 400 for necessary field not filled, 404 for user not found.
                  data:
                    type: object
                    description: A JSON object containing queryed info. Only avaliable when status_code is 200.
                    properties:
                      userID:
                        type: string
                      username:
                        type: string
                      gender:
                        type: string
                      email:
                        type: string
                      phone:
                        type: string
                      school:
                        type: string
                      major:
                        type: string
                      age:
                        type: integer
                      role:
                        type: string
                        enum: ['teacher', 'student']
                      studentID:
                        type: string
                        description: Only available when role is student
                      grade:
                        type: string
                        description: Only available when role is student
                      teacherID:
                        type: string
                        description: Only available when role is teacher
                      avatar:
                        type: string
          examples:
            SuccessfulltQueryed_Teacher:
              status_code: 200
              data:
                userID: '123'
                username: example
                gender: 'male'
                email: example@example.com
                phone: 12345678901
                school: 'SYSU'
                major: 'SE'
                age: 18
                role: 'student'
                studentID: '16340299'
                grade: '2016'
                avatar: EXAMPLE.PNG
            SuccessfulltQueryed_Student:
              status_code: 200
              data:
                userID: '123'
                username: example
                gender: 'male'
                email: example@example.com
                phone: 12345678901
                school: 'SYSU'
                major: 'SE'
                age: 34
                role: 'teacher'
                teacherID: '151273'
                avatar: EXAMPLE.PNG
            FieldNotFilled:
              status_code: 400
            NoSuchUser:
              status_code: 404
        '500':
          description: Serverend or backend error.
    post:
      summary: Update account info
      description: Update account info with given info
      requestBody:
        description: A JSON object contating all info needed to update
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  required: true
                password:
                  type: string
                gender:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                school:
                  type: string
                major:
                  type: string
                age:
                  type: integer
                studentID:
                  type: string
                  description: Only available when role is student
                grade:
                  type: string
                  description: Only available when role is student
                teacherID:
                  type: string
                  description: Only available when role is treacher
                avatar:
                  type: string
      responses:
        '200':
          description: Network OK. A JSON object containing status üê¥ will be returned to requester.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: An integer code indicating the response status. 201 for successfully updated, 400 for necessary field not filled, 401 for requesting before login, 409 for conflict field.
                  data:
                    type: object
                    properties:
                      which:
                        type: string
                        description: Describing which field is conflict. Only available when status_code is 409.
          examples:
            SuccessfullyUpdated:
              status_code: 201
            FieldNotFilled:
              status_code: 400
            NotLogin:
              status_code: 401
            ConflictField:
              status_code: 409
              data:
                which: email
        '500':
          description: Serverend or backend error.
  /avatar:
    post:
      summary: Upload avatar image
      description: Upload avatar image and get its filename on server
      requestBody:
        description: The image to be uploaded
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
      responses:
        '200':
          description: Network OK. A JSON object containing status üê¥ will be returned to requester.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: An integer code indicating the response status. 201 for image successfully saved, 400 for necessary field not filled, 401 for uploading before login.
                  data:
                    type: object
                    properties:
                      filename:
                        type: string
                        description: The filename of the uploaded avatar image on the server. One can access it with relative url /public/avatar/filename. Only available when status_code is 201.
          examples:
            SuccessfullySaved:
              status_code: 201
              data:
                filename: EXAMPLE.PNG
            FieldNotFilled:
              status_code: 400
            NotLogin:
              status_code: 401
        '500':
          description: Serverend or backend error.
  /registration:
    post:
      summary: Create an account
      description: Create an account with given info
      requestBody:
        description: A JSON object containing all info to create an account.
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  required: true
                password:
                  type: string
                  required: true
                email:
                  type: string
                  required: true
                phone:
                  type: string
                  required: true
                role:
                  type: string
                  enum: ["teacher", "student"]
                  required: true
      responses:
        '200':
          description: Network OK. A JSON object containing status üê¥ will be returned to requester.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: An integer code indicating the response status. 201 for successfully created, 400 for necessary field not filled, 409 for username conflict.
                  data:
                    type: object
                    properties:
                      which: 
                        type: string
                        description: Describing which field is conflict. Only available when status_code is 409.
          examples:
            SuccessfullyCreated:
              status_code: 201
            FieldNotFilled:
              status_code: 400
            ConflictUsername:
              status_code: 409
              data:
                which: email
        '500':
          description: Serverend or backend error.
  /balance: # GET for getting the balance of current user
    get:
      summary: Query wallet balance of current user 
      description: Query the wallet balance of current user.
      responses:
        '200':
          description: "Network OK. A JSON object containing status \U0001F434 will be returned to requester."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: 'An integer code indicating the response status. 200 for query successfully, 401 for query before login.'
                  data:
                    type: object
                    properties:
                      balance:
                        type: number
                        description: "Balance of queryed account's wallet. Only available when status_code is 200."
          examples:
            SuccessfullyQueryed:
              status_code: 200
              data:
                balance: 114192.2
            NoLogin:
              status_code: 401
        '500':
          description: 'Backend or serverend error.'
  /task: # GET for query one task, POST for create one task, DELETE for manually complete a uncompleted task.
    get:
      summary: Query one task
      description: Use taskID to query a task
      parameters: 
        - in: query
          name: taskID
          schema:
            type: string
          required: true
      responses:
        '200': 
          description: "Network OK. A JSON object containing status \U0001F434 will be returned to requester."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: 'An integer code indicating the response status. 200 for Successfully queryed, 404 for no such task, 400 for necessary field not filled or invalid format.'
                  data:
                    type: object
                    properties:
                      content:
                        type: string
                      type:
                        type: string
                      issuer:
                        type: string
                      reward:
                        type: number
                      deadline:
                        type: string
                      repeatTime:
                        type: integer
                      isCompleted:
                        type: boolean
          examples:
            SuccessfullyQueryed:
              status_code: 200
              data:
                content: EXAMPLE
                type: EXAMPLE
                issuer: EXAMPLE
                reward: 999.999
                deadline: YYYY-MM-DD
                repeatTime: 15
                isCompleted: false
            NoSuchTask:
              status_code: 404
            FieldNotFilled:
              status_code: 400
        '500':
          description: 'Backend or serverend error.'
    post:
      summary: Create a task
      description: Create a task with given info, if success, a taskID will be returned. Backend should check the balance of current user to make sure caller has enough money to make this request.
      requestBody:
        description: A JSON object containing all needed info to create a task.
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                type:
                  type: string
                reward:
                  type: number
                repeatTime:
                  type: integer
                deadline:
                  type: string
      responses:
        '200':
          description: "Network OK. A JSON object containing status \U0001F434 will be returned to requester."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: 'An integer code indicating the response status. 201 for Successfully created, 400 for necessary field not filled or invalid format, 403 for insufficient balance.'
                  data:
                    type: object
                    properties:
                      taskID:
                        type: string
                        description: 'TaskID of created task, only available when status_code is 201.'
          examples:
            SuccessfullyCreated:
              status_code: 201
              data:
                taskID: '123'
            FieldNotFilled:
              status_code: 400
            InsufficientBalance:
              status_code: 403
        '500':
          description: Backend error.
    delete:
      summary: Complete an uncompleted task
      description: Complete an uncompleted task. After doing so, no more acceptance record can be finished. Unused fund will be returned to the balance of the issuer. Current user must be the issuer of the task.
      parameters:
        - in: query
          name: taskID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Network OK. A JSON object containing status \U0001F434 will be returned to requester."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: "An integer code indicating the response status. 200 for completed successfully, 404 for no such task or task has been completed, 400 for necessary field not filled or invalid format, 401 for the task is not issued by the given user or request before login."
          examples:
            SuccessfullyCompleted:
              status_code: 200
            NoSuchTask:
              status_code: 404
            FieldNotFilled:
              status_code: 400
            Unauthorized:
              status_code: 401
        '500':
          description: "Backend or serverend error."
  /tasks: # GET for query one page of tasks
    get:
      summary: Get a page of available tasks
      description: Get a page of available tasks. Page number could be given in the parameter. Completed tasks can only be returned when isComplete is set to be true.
      parameters:
        - in: query
          name: page
          description: 'Which page of data do you require?'
          schema:
            type: integer
          required: true
        - in: query
          name: type
          description: 'Optional parameter, used to query tasks of specific type.'
          schema:
            type: string
        - in: query
          name: issuer
          description: 'Optional parameter, userid used to query tasks issued by specific user.'
          schema:
            type: string
        - in: query
          name: content
          description: 'Optional parameter, used to query tasks containing the given key word in its content.'
          schema:
            type: string
        - in: query
          name: isComplete
          description: 'Optional parameter, completed tasks are visible only if this parameter is set to be true.'
          schema:
            type: boolean
      responses:
        '200': 
          description: "Network OK. A JSON object containing status \U0001F434 will be returned to requester."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: 'An integer code indicating the response status. 200 for Successfully queryed, 400 for necessary field not filled or invalid format, 416 for parameter out of range.'
                  data:
                    type: object
                    properties:
                      tasks:
                        type: array
                        description: 'Array of tasks in this page, only available when status_code is 200.'
                        items:
                          type: object
                          properties:
                            taskID:
                              type: string
                            content:
                              type: string
                            type:
                              type: string
                            issuer:
                              type: string
                            reward:
                              type: number
                            deadline:
                              type: string
                            repeatTime:
                              type: integer
                      max_pages:
                        type: integer
                        description: 'Maximal valid page number.'
          examples:
            SuccessfullyQueryed:
              status_code: 200
              data:
                tasks:
                  - taskID: '123'
                    content: EXAMPLE
                    type: EXAMPLE
                    issuer: EXAMPLE
                    reward: 123.123
                    deadline: YYYY-MM-DD
                    repeatTime: 15
                  - taskID: '124'
                    content: EXAMPLE
                    type: EXAMPLE
                    issuer: EXAMPLE
                    reward: 123.123
                    deadline: YYYY-MM-DD
                    repeatTime: 15
                max_pages: 15
            FieldNotFilled:
              status_code: 400
            OutOfRange:
              status_code: 416
              data:
                max_pages: 15
        '500':
          description: 'Backend or serverend error.'
  /accepted_tasks: # GET for one page of query accepted tasks of current user, POST for accept a new task
    get:
      summary: Query a page of accepted tasks of current user
      description: Query a page of accepted tasks of current user. One can specify the page number to show a specific range of tasks.
      parameters:
        - in: query
          name: page
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "Network OK. A JSON object containing status \U0001F434 will be returned to requester."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: 'An integer code indicating the response status. 200 for Successfully queryed, 400 for necessary field not filled or invalid format, 401 for request before login, 416 for parameter out of range.'
                    data:
                      type: object
                    properties:
                      tasks:
                        type: array
                        description: 'Array of tasks in this page, only available when status_code is 200.'
                        items:
                          type: object
                          properties:
                            taskID:
                              type: string
                            content:
                              type: string
                            type:
                              type: string
                            issuer:
                              type: string
                            reward:
                              type: number
                            deadline:
                              type: string
                            isFinished:
                              type: boolean
                      max_pages:
                        type: integer
                        description: 'Maximal valid page number.'
          examples:
            SuccessfullyQueryed:
              status_code: 200
              data:
                tasks:
                  - taskID: '123'
                    content: EXAMPLE
                    type: EXAMPLE
                    issuer: EXAMPLE
                    reward: 123.123
                    deadline: YYYY-MM-DD
                    isFinished: false
                  - taskID: '124'
                    content: EXAMPLE
                    type: EXAMPLE
                    issuer: EXAMPLE
                    reward: 123.123
                    deadline: YYYY-MM-DD
                    isFinished: true
                max_pages: 15
            FieldNotFilled:
              status_code: 400
            NoLogin:
              status_code: 404
            OutOfRange:
              status_code: 416
              data:
                max_pages: 15
        '500':
          description: 'Backend or serverend error.'
    post:
      summary: Accept a new task.
      description: "Try to accept a new task. One **cannot** accept a same task for multiple times."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: A JSON object describing the one who accept the task and the taskID of the task.
              properties:
                taskID:
                  type: string
      responses:
        '200': 
          description: "Network OK. A JSON object containing status \U0001F434 will be returned to requester."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: 'An integer code indicating the response status. 201 for Successfully accepted, 400 for necessary field not filled or invalid format, 404 for no such taskID, 401 for request before login, 409 for accept a same task for multiple times.'
          examples:
            SuccessfullyAccept:
              status_code: 201
            FieldNotFilled:
              status_code: 400
            NoSuchEntity:
              status_code: 404
            NoLogin:
              status_code: 401
            MultipleAcceptance:
              status_code: 409
        '500':
          description: 'Backend or serverend error.'
  /created_tasks:  # GET for one page of query created tasks
    get:
      summary: Query a page of created tasks of current user
      description: Query a page of created tasks of current user. One can specify the page number to show a specific range of tasks.
      parameters:
        - in: query
          name: page
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "Network OK. A JSON object containing status \U0001F434 will be returned to requester."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: 'An integer code indicating the response status. 200 for Successfully queryed, 400 for necessary field not filled or invalid format, 401 for request before login, 416 for parameter out of range.'
                    data:
                      type: object
                    properties:
                      tasks:
                        type: array
                        description: 'Array of tasks in this page, only available when status_code is 200.'
                        items:
                          type: object
                          properties:
                            taskID:
                              type: string
                            content:
                              type: string
                            type:
                              type: string
                            issuer:
                              type: string
                            reward:
                              type: number
                            deadline:
                              type: string
                            isCompleted:
                              type: boolean
                      max_pages:
                        type: integer
                        description: 'Maximal valid page number.'
          examples:
            SuccessfullyQueryed:
              status_code: 200
              data:
                tasks:
                  - taskID: '123'
                    content: EXAMPLE
                    type: EXAMPLE
                    issuer: EXAMPLE
                    reward: 123.123
                    deadline: YYYY-MM-DD
                    isCompleted: false
                  - taskID: '124'
                    content: EXAMPLE
                    type: EXAMPLE
                    issuer: EXAMPLE
                    reward: 123.123
                    deadline: YYYY-MM-DD
                    isCompleted: true
                max_pages: 15
            FieldNotFilled:
              status_code: 400
            NoLogin:
              status_code: 404
            OutOfRange:
              status_code: 416
              data:
                max_pages: 15
        '500':
          description: 'Backend or serverend error.'
  /acceptance: # GET for querying one page of acceptance record of a task, POST for finishing one record, DELETE for canceling an acceptance.
    get:
      summary: Query a page of acceptance record of a specific task.
      description: Query a page of acceptance record of a specific task created by the current user.
      parameters:
        - in: query
          name: taskID
          required: true
          schema:
            type: string
        - in: query
          name: page
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "Network OK. A JSON object containing status \U0001F434 will be returned to requester."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code: 
                    type: integer
                    description: "An integer code indicating the response status. 200 for Successfully queryed, 400 for necessary field not filled or invalid format, 404 for no such task, 416 for parameter out of range, 401 for request before login or not the issuer of task."
                  data:
                    type: object
                    properties:
                      records:
                        type: array
                        description: "Array of records, only available when status_code is 200."
                        items:
                          type: object
                          properties:
                            userID:
                              type: string
                            isFinished:
                              type: boolean
                      max_pages:
                        type: integer
                        description: "Maximal number of pages."
          examples:
            SuccessfullyQueryed:
              status_code: 200
              data:
                records:
                  - userID: '123'
                    isFinished: false
                  - userID: '124'
                    isFinished: true
                max_pages: 15
            FieldNotFilled:
              status_code: 400
            UserNotFound:
              status_code: 404
            Unauthorized:
              status_code: 401
            OutOfRange:
              status_code: 416
              data:
                max_pages: 15
        '500':
          description: 'Backend or serverend error.'
    post:
      summary: Finish one created task for a specific user.
      description: Finish one created task for a specific user by giving the userID, taskID and the username of current user (must be the issuer). This API can only be called by the issuer of the task.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userID:
                  type: string
                  description: UserID of the user who accept the task.
                taskID:
                  type: string
                  description: TaskID of the task to be finished.
      responses:
        '200':
          description: "Network OK. A JSON object containing status \U0001F434 will be returned to requester."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: 'An integer code indicating the response status. 200 for Successfully finished, 400 for necessary field not filled or invalid format, 404 for no such userID or taskID, 401 for not authorized, 416 for trying to finish completed task'
          examples:
            SuccessfullyAccept:
              status_code: 200
            FieldNotFilled:
              status_code: 400
            NoSuchEntity:
              status_code: 404
            Unauthorized:
              status_code: 401
            CompletedTask:
              status_code: 416
        '500':
          description: 'Backend or serverend error.'
    delete:
      summary: "One can delete its acceptance record."
      description: "One can delete its acceptance record **before finishing it**."
      parameters:
        - in: query
          name: taskID
          schema:
            type: string
      responses:
        '200':
          description: "Network OK. A JSON object containing status \U0001F434 will be returned to requester."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: 'An integer code indicating the response status. 200 for deleted successfully, 404 for no such task, 400 for necessary field not filled or invalid format, 401 for request before login, 403 for task has been finished.'
          examples:
            SuccessfullyDeleted:
              status_code: 200
            NoSuchTask:
              status_code: 404
            FieldNotFilled:
              status_code: 400
            NoLogin:
              status_code: 401
            TaskBeenFinished:
              status_code: 403
        '500':
          description: "Backend or serverend error."